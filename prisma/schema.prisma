// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// type Books {
//   books String[]
// }

type Address {
  country    String?
  zipCode    String?
  city       String?
  street     String?
  buildingNr String?
  placeNr    String?
}

type Covers {
  original String
  big      String
  medium   String
  small    String
}

// type CoverType {
//   paperback Boolean
//   hardcover Boolean
//   ebook     Boolean
// }

type Edition {
  myEditionNumber Int?
  myEditionYear   Int?
}

type BioPages {
  wiki         String?
  goodreads    String?
  lubimyczytac String?
}
type PurchasedBookInfo {
  coverType   CoverType
  edition     Edition?
  buyPrice    Int?
  currency    Currency?
}

enum CoverType {
  PAPERBACK
  HARDCOVER
  EBOOK
}

enum Role {
  USER
  ADMIN
}

enum Language {
  Polish
  English
}

enum Status {
  READ
  UNREAD
  WANTEDTOBUY
  WANTEDTOREAD
}

enum Currency {
  PLN
  EUR
  USD
}

model Author {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  secondName  String?
  thirdName   String?
  lastName    String
  nationality String?
  birthYear   Int?
  deathYear   Int?
  bioPages    BioPages?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookIDs     String[]  @db.ObjectId
  books       Book[]    @relation(fields: [bookIDs], references: [id])
}

model Book {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  title                String
  language             Language           @default(Polish)
  pages                Int
  covers               Covers?
  isbn                 String             @unique
  firstEdition         Int
  authorIDs            String[]           @db.ObjectId
  author               Author[]           @relation(fields: [authorIDs], references: [id])
  collectionIDs        String[]           @db.ObjectId
  collections          Collection[]       @relation(fields: [collectionIDs], references: [id])
  genreIDs             String[]           @db.ObjectId
  genres               Genre[]            @relation("Genres", fields: [genreIDs], references: [id])
  publisherID          String             @db.ObjectId
  publisher            Publisher          @relation(fields: [publisherID], references: [id])
  translatorIDs        String[]           @db.ObjectId
  translator           Translator[]       @relation(fields: [translatorIDs], references: [id])
  usersIDs             String[]           @db.ObjectId
  shelvedByUsers       Profile[]          @relation(fields: [usersIDs], references: [id])
  customCollectionsIDs String[]           @db.ObjectId
  customCollections    CustomCollection[] @relation(fields: [customCollectionsIDs], references: [id])
}

type BookInCollection {
  tome   String
  bookId String @db.ObjectId
}

model Collection {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  name              String
  booksIDs          String[]           @db.ObjectId
  books             Book[]             @relation(fields: [booksIDs], references: [id])
  booksInCollection BookInCollection[]
}

model Genre {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  booksIDs  String[] @db.ObjectId
  books     Book[]   @relation("Genres", fields: [booksIDs], references: [id])
}

model Publisher {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  address   Address
  website   String?
  books     Book[]
}

model Translator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  bookIDs   String[] @db.ObjectId
  books     Book[]   @relation(fields: [bookIDs], references: [id])
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String?
  email        String   @unique
  password     String
  role         Role     @default(USER)
  profile      Profile? @relation(name: "User")
  familyHeadId String?  @db.ObjectId
  familyHead   Profile? @relation("Family", fields: [familyHeadId], references: [id])
}

model Profile {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bio               String
  userId            String             @unique @db.ObjectId
  user              User               @relation(name: "User", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  family            User[]             @relation(name: "Family")
  booksInLibraryIDs String[]           @db.ObjectId
  booksLibrary      Book[]             @relation(fields: [booksInLibraryIDs], references: [id])
  userBookDetails   UserBookDetails[]
  customCollections CustomCollection[] 
}

model UserBookDetails {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  bookID    String     @db.ObjectId
  profileID String     @db.ObjectId
  profile   Profile    @relation(fields: [profileID], references: [id])
  status    Status?
  whenRead  Int?
  rating    Int?
  purchasedBookInfo   PurchasedBookInfo[]
  
 


}

model CustomCollection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  profileID String   @unique @db.ObjectId
  profile   Profile  @relation(fields: [profileID], references: [id])
  booksIDs  String[] @db.ObjectId
  books     Book[]   @relation(fields: [booksIDs], references: [id])
  published    Boolean
}
